{"version":3,"file":"nolimit-latest.js","mappings":"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","sources":["webpack://nolimit/webpack/universalModuleDefinition","webpack://nolimit/webpack/bootstrap","webpack://nolimit/webpack/runtime/define property getters","webpack://nolimit/webpack/runtime/hasOwnProperty shorthand","webpack://nolimit/webpack/runtime/make namespace object","webpack://nolimit/./src/nolimit.css","webpack://nolimit/./src/nolimit.js","webpack://nolimit/./src/nolimit-api.js","webpack://nolimit/./src/info.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"nolimit\"] = factory();\n\telse\n\t\troot[\"nolimit\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export default \"html, body {\\n    overflow: hidden;\\n    margin: 0;\\n    width: 100%;\\n    height: 100%;\\n}\\n\\nbody {\\n    position: relative;\\n}\\n\";","/**\n * @module nolimit\n */\nimport {nolimitApiFactory} from './nolimit-api';\nimport {loadInfo} from './info';\nimport nolimitCss from './nolimit.css';\n\nconst CDN = 'https://{ENV}';\nconst LOADER_URL = '{CDN}/loader/loader-{DEVICE}.html?operator={OPERATOR}&game={GAME}&language={LANGUAGE}';\nconst REPLACE_URL = '{CDN}/loader/game-loader.html?{QUERY}';\nconst GAMES_URL = '{CDN}/games';\n\nconst DEFAULT_OPTIONS = {\n    device: 'desktop',\n    environment: 'partner',\n    language: 'en',\n    'nolimit.js': __VERSION__\n};\n\n/**\n * @property {String} version current version of nolimit.js\n */\nexport const version = __VERSION__;\n\n/**\n * @property {Object} options current options used\n */\nlet options = {};\n\n/**\n * Initialize loader with default parameters. Can be skipped if the parameters are included in the call to load instead.\n *\n * @param {Object}  initOptions\n * @param {String}  initOptions.operator the operator code for the operator\n * @param {String}  [initOptions.language=\"en\"] the language to use for the game\n * @param {String}  [initOptions.device=desktop] type of device: 'desktop' or 'mobile'. Recommended to always set this to make sure the correct device is used.\n * @param {String}  [initOptions.environment=partner] which environment to use; usually 'partner' or the name of a production environment. This overrides the environment part of the hostname.\n * @param {Boolean} [initOptions.fullscreen=true] set to false to disable automatic fullscreen on mobile (Android only)\n * @param {Boolean} [initOptions.clock=true] set to false to disable in-game clock\n * @param {Boolean} [initOptions.autoplay=true] set to false to disable and remove the auto play button.\n * @param {Boolean} [initOptions.mute=false] start the game without sound\n * @param {Boolean} [initOptions.hideCurrency] hide currency symbols/codes in the game\n * @param {String}  [initOptions.quality] force asset quality. Possible values are 'high', 'medium', 'low'. Defaults to smart loading in each game.\n * @param {Object}  [initOptions.jurisdiction] force a specific jurisdiction to enforce specific license requirements and set specific options and overrides. See README for jurisdiction-specific details.\n * @param {Object}  [initOptions.jurisdiction.name] the name of the jurisdiction, for example \"MT\", \"DK\", \"LV\", \"RO\", \"UKGC\", \"PT\", \"ES\", \"IT\" or \"SE\".\n * @param {Object}  [initOptions.realityCheck] set options for reality check. See README for more details.\n * @param {Object}  [initOptions.realityCheck.enabled=true] set to false to disable reality-check dialog.\n * @param {Number}  [initOptions.realityCheck.interval=60] Interval in minutes between showing reality-check dialog.\n * @param {Number}  [initOptions.realityCheck.sessionStart=Date.now()] override session start, default is Date.now().\n * @param {Number}  [initOptions.realityCheck.nextTime] next time to show dialog, defaults to Date.now() + interval.\n * @param {Number}  [initOptions.realityCheck.bets=0] set initial bets if player already has bets in the session.\n * @param {Number}  [initOptions.realityCheck.winnings=0] set initial winnings if player already has winnings in the session.\n * @param {Number}  [initOptions.realityCheck.message] Message to display when dialog is opened. A generic default is provided.\n * @param {String}  [initOptions.playForFunCurrency=EUR] currency to use when in playing for fun mode. Uses EUR if not specified.\n * @param {Boolean} [initOptions.hideExitButton=false] set to true to control closing of mobile games from outside of game area.\n * @param {Boolean} [initOptions.showExitButtonDesktop=false] set to true to show exit button also in desktop mode.\n * @param {Boolean} [initOptions.useReplayLinkPopup=false] set to true to show a popup for loading replays instead of trying to open directly.\n * @param {Boolean} [initOptions.googleAnalytics=true] set to false to completely disable the use of analytics.\n * @param {String}  [initOptions.lobbyUrl=\"history:back()\"] URL to redirect back to lobby on mobile, if not using a target\n * @param {String}  [initOptions.depositUrl] URL to deposit page, if not using a target element\n * @param {String}  [initOptions.supportUrl] URL to support page, if not using a target element\n * @param {Boolean} [initOptions.depositEvent] instead of using URL, emit \"deposit\" event (see event documentation)\n * @param {Boolean} [initOptions.lobbyEvent] instead of using URL, emit \"lobby\" event (see event documentation) (mobile only)\n * @param {String}  [initOptions.accountHistoryUrl] URL to support page, if not using a target element\n *\n * @example\n * nolimit.init({\n *    operator: 'SMOOTHOPERATOR',\n *    language: 'sv',\n *    device: 'mobile',\n *    environment: 'partner',\n *    currency: 'SEK',\n *    jurisdiction: {\n *        name: 'SE'\n *    },\n *    realityCheck: {\n *        interval: 30\n *    }\n * });\n */\nexport function init(initOptions) {\n    window.nolimit.options = initOptions;\n}\n\n/**\n * Load game, replacing target with the game.\n *\n * <li> If target is a HTML element, it will be replaced with an iframe, keeping all the attributes of the original element, so those can be used to set id, classes, styles and more.\n * <li> If target is a Window element, the game will be loaded directly in that.\n * <li> If target is undefined, it will default to the current window.\n *\n * @param {Object} loadOptions see init for details\n * @see {@link init} for details on more options\n * @param {String}              loadOptions.game case sensitive game code, for example 'DragonTribe' or 'Wixx'\n * @param {HTMLElement|Window}  [loadOptions.target=window] the HTMLElement or Window to load the game in\n * @param {String}              [loadOptions.token] the token to use for real money play\n * @param {String}              [loadOptions.version] force specific game version such as '1.2.3', or 'development' to disable cache\n *\n * @returns {nolimitApi}        The API connection to the opened game.\n *\n * @example\n * var api = nolimit.load({\n *    game: 'DragonTribe',\n *    target: document.getElementById('game'),\n *    token: realMoneyToken,\n *    mute: true\n * });\n */\nexport function load(loadOptions) {\n    loadOptions = processOptions(mergeOptions(options, loadOptions));\n\n    let target = loadOptions.target || window;\n\n    if (target.Window && target instanceof target.Window) {\n        target = document.createElement('div');\n        target.setAttribute('style', 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden;');\n        document.body.appendChild(target);\n    }\n\n    if (target.ownerDocument && target instanceof target.ownerDocument.defaultView.HTMLElement) {\n        const iframe = makeIframe(target);\n        target.parentNode.replaceChild(iframe, target);\n\n        return nolimitApiFactory(iframe, () => html(iframe.contentWindow, loadOptions));\n    } else {\n        throw 'Invalid option target: ' + target;\n    }\n}\n\n/**\n * Load game in a new, separate page. This offers the best isolation, but no communication with the game is possible.\n *\n * @param {Object} replaceOptions see init for details\n * @see {@link init} for details on more options\n * @param {String}              replaceOptions.game case sensitive game code, for example 'DragonTribe' or 'Wixx'\n * @param {String}              [replaceOptions.token] the token to use for real money play\n * @param {String}              [replaceOptions.version] force specific game version such as '1.2.3', or 'development' to disable cache\n *\n * @example\n * var api = nolimit.replace({\n *    game: 'DragonTribe',\n *    target: document.getElementById('game'),\n *    token: realMoneyToken,\n *    mute: true\n * });\n */\nexport function replace(replaceOptions) {\n    location.href = url(replaceOptions);\n\n    function noop() {\n    }\n\n    return {on: noop, call: noop};\n}\n\n/**\n * Constructs a URL for manually loading the game in an iframe or via redirect.\n *\n * @param {Object} urlOptions see init for details\n * @see {@link init} for details on options\n * @return {string}\n */\nexport function url(urlOptions) {\n    const gameOptions = processOptions(mergeOptions(options, urlOptions));\n    return REPLACE_URL\n        .replace('{CDN}', gameOptions.cdn)\n        .replace('{QUERY}', makeQueryString(gameOptions));\n}\n\n/**\n * Load information about the game, such as: current version, preferred width/height etc.\n *\n * @param {Object}      infoOptions\n * @param {String}      [infoOptions.environment=partner] which environment to use; usually 'partner' or the name of a production environment. This overrides the environment part of the hostname.\n * @param {String}      infoOptions.game case sensitive game code, for example 'DragonTribe' or 'Wixx'\n * @param {String}      [infoOptions.version] force specific version of game to load.\n * @param {Function}    callback  called with the info object, if there was an error, the 'error' field will be set\n *\n * @example\n * nolimit.info({game: 'DragonTribe'}, function(info) {\n *     var target = document.getElementById('game');\n *     target.style.width = info.size.width + 'px';\n *     target.style.height = info.size.height + 'px';\n *     console.log(info.name, info.version);\n * });\n */\nexport function info(infoOptions, callback) {\n    infoOptions = processOptions(mergeOptions(options, infoOptions));\n    loadInfo(infoOptions, callback);\n}\n\nfunction makeQueryString(makeQueryStringOptions) {\n    const query = [];\n    for (let key in makeQueryStringOptions) {\n        let value = makeQueryStringOptions[key];\n        if (typeof value === 'undefined') {\n            continue;\n        }\n        if (value instanceof HTMLElement) {\n            continue;\n        }\n        if (typeof value === 'object') {\n            value = JSON.stringify(value);\n        }\n        query.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n    return query.join('&');\n}\n\nfunction makeIframe(element) {\n    const iframe = document.createElement('iframe');\n    copyAttributes(element, iframe);\n\n    iframe.setAttribute('frameBorder', '0');\n    iframe.setAttribute('allowfullscreen', '');\n    iframe.setAttribute('allow', 'autoplay; fullscreen');\n    iframe.setAttribute('sandbox', 'allow-forms allow-scripts allow-same-origin allow-top-navigation allow-popups');\n\n    const name = generateName(iframe.getAttribute('name') || iframe.id);\n    iframe.setAttribute('name', name);\n\n    return iframe;\n}\n\nfunction mergeOptions(globalOptions, gameOptions) {\n    delete globalOptions.version;\n    delete globalOptions.replay;\n    delete globalOptions.token;\n    const result = {};\n    for (let name in DEFAULT_OPTIONS) {\n        result[name] = DEFAULT_OPTIONS[name];\n    }\n    for (let name in globalOptions) {\n        result[name] = globalOptions[name];\n    }\n    for (let name in gameOptions) {\n        result[name] = gameOptions[name];\n    }\n    return result;\n}\n\nfunction insertCss(document) {\n    const style = document.createElement('style');\n    document.head.appendChild(style);\n    style.appendChild(document.createTextNode(nolimitCss));\n}\n\nfunction setupViewport(head) {\n    const viewport = head.querySelector('meta[name=\"viewport\"]');\n    if (!viewport) {\n        head.insertAdjacentHTML('beforeend', '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">');\n    }\n}\n\nfunction processOptions(optionsToProcess) {\n    optionsToProcess.device = optionsToProcess.device.toLowerCase();\n    optionsToProcess.mute = optionsToProcess.mute || false;\n    let environment = optionsToProcess.environment.toLowerCase();\n    if (environment.indexOf('.') === -1) {\n        environment += '.nolimitcdn.com';\n    }\n    optionsToProcess.cdn = optionsToProcess.cdn || CDN.replace('{ENV}', environment);\n    optionsToProcess.staticRoot = optionsToProcess.staticRoot || GAMES_URL.replace('{CDN}', optionsToProcess.cdn);\n    optionsToProcess.playForFunCurrency = optionsToProcess.playForFunCurrency || optionsToProcess.currency;\n    if (optionsToProcess.language === 'pe' || optionsToProcess.language === 'cl') {\n        optionsToProcess.language = 'es';\n    }\n    return optionsToProcess;\n}\n\nfunction html(contentWindow, htmlOptions) {\n    const document = contentWindow.document;\n\n    contentWindow.focus();\n\n    insertCss(document);\n    setupViewport(document.head);\n\n    const loaderElement = document.createElement('iframe');\n    loaderElement.setAttribute('frameBorder', '0');\n    loaderElement.style.backgroundColor = 'black';\n    loaderElement.style.width = '100vw';\n    loaderElement.style.height = '100vh';\n    loaderElement.style.position = 'relative';\n    loaderElement.style.zIndex = '2147483647';\n    loaderElement.classList.add('loader');\n\n    loaderElement.src = LOADER_URL\n        .replace('{CDN}', htmlOptions.cdn)\n        .replace('{DEVICE}', htmlOptions.device)\n        .replace('{OPERATOR}', htmlOptions.operator)\n        .replace('{GAME}', htmlOptions.game)\n        .replace('{LANGUAGE}', htmlOptions.language);\n\n    document.body.innerHTML = '';\n\n    contentWindow.on('error', function (error) {\n        if (loaderElement && loaderElement.contentWindow) {\n            loaderElement.contentWindow.postMessage(JSON.stringify({'error': error}), '*');\n        }\n    });\n\n    const infoPromise = new Promise((resolve, reject) => {\n        window.nolimit.info(htmlOptions, function (info) {\n            if (info.error) {\n                reject(info);\n            } else {\n                resolve(info);\n            }\n        });\n    });\n\n    loaderElement.onload = function () {\n        infoPromise.then(info => {\n            contentWindow.trigger('info', info);\n            loaderElement.contentWindow.postMessage(JSON.stringify(info), '*');\n            const gameElement = document.createElement('script');\n            gameElement.src = info.staticRoot + '/game.js';\n            contentWindow.nolimit = window.nolimit;\n            contentWindow.nolimit.options = htmlOptions;\n            contentWindow.nolimit.options.loadStart = Date.now();\n            contentWindow.nolimit.options.version = info.version;\n            contentWindow.nolimit.options.info = info;\n            document.body.appendChild(gameElement);\n        }).catch(info => {\n            contentWindow.trigger('error', info.error);\n            loaderElement.contentWindow.postMessage(JSON.stringify(info), '*');\n        });\n        loaderElement.onload = function () {\n        };\n    };\n\n    document.body.appendChild(loaderElement);\n}\n\nfunction copyAttributes(from, to) {\n    const attributes = from.attributes;\n    for (let i = 0; i < attributes.length; i++) {\n        let attr = attributes[i];\n        to.setAttribute(attr.name, attr.value);\n    }\n}\n\nconst generateName = (function () {\n    let generatedIndex = 1;\n    return function (name) {\n        return name || 'Nolimit-' + generatedIndex++;\n    };\n})();\n\n","export function nolimitApiFactory(target, onload) {\n\n    const listeners = {};\n    const unhandledEvents = {};\n    const unhandledCalls = [];\n    let port;\n\n    function handleUnhandledCalls(port) {\n        while (unhandledCalls.length > 0) {\n            port.postMessage(unhandledCalls.shift());\n        }\n    }\n\n    function addMessageListener(contentWindow) {\n        contentWindow.addEventListener('message', function (e) {\n            if (e.ports && e.ports.length > 0) {\n                port = e.ports[0];\n                port.onmessage = onMessage;\n                handleUnhandledCalls(port);\n            }\n        });\n        contentWindow.trigger = trigger;\n        contentWindow.on = on;\n        onload();\n    }\n\n    if (target.nodeName === 'IFRAME') {\n        if (target.contentWindow && target.contentWindow.document && target.contentWindow.document.readyState === 'complete') {\n            addMessageListener(target.contentWindow);\n        } else {\n            target.addEventListener('load', function () {\n                addMessageListener(target.contentWindow);\n            });\n        }\n    } else {\n        addMessageListener(target);\n    }\n\n    function onMessage(e) {\n        trigger(e.data.method, e.data.params);\n    }\n\n    function sendMessage(method, data) {\n        const message = {\n            jsonrpc: '2.0',\n            method: method\n        };\n\n        if (data) {\n            message.params = data;\n        }\n\n        if (port) {\n            try {\n                port.postMessage(message);\n            } catch (ignored) {\n                port = undefined;\n                unhandledCalls.push(message);\n            }\n        } else {\n            unhandledCalls.push(message);\n        }\n    }\n\n    function registerEvents(events) {\n        sendMessage('register', events);\n    }\n\n    function trigger(event, data) {\n        if (listeners[event]) {\n            listeners[event].forEach(function (callback) {\n                callback(data);\n            });\n        } else {\n            unhandledEvents[name] = unhandledEvents[name] || [];\n            unhandledEvents[name].push(data);\n        }\n    }\n\n    function on(event, callback) {\n        listeners[event] = listeners[event] || [];\n        listeners[event].push(callback);\n        while (unhandledEvents[event] && unhandledEvents[event].length > 0) {\n            trigger(event, unhandledEvents[event].pop());\n        }\n\n        registerEvents([event]);\n    }\n\n    /**\n     * The api object returned when loading a game with methods for interacting with the loaded game\n     *\n     * @module nolimitApi\n     */\n    return {\n        /**\n         * Add listener for event from the started game\n         *\n         * @param {String}   event    name of the event\n         * @param {Function} callback callback for the event, see specific event documentation for any parameters\n         *\n         * @example\n         * api.on('deposit', function openDeposit () {\n         *     showDeposit().then(function() {\n         *         // ask the game to refresh balance from server\n         *         api.call('refresh');\n         *     });\n         * });\n         */\n        on: on,\n\n        /**\n         * Call method in the open game\n         *\n         * @param {String} method name of the method to call\n         * @param {Object} [data] optional data for the method called, if any\n         *\n         * @example\n         * // reload the game\n         * api.call('reload');\n         */\n        call: sendMessage,\n\n        /**\n         * Triggers a named event\n         *\n         * @param {String} event  name of the event\n         * @param {Object} [data] optional data for the event, if any\n         */\n        trigger: trigger\n    };\n}\n","export function loadInfo(options, callback) {\n    const parts = [options.staticRoot, options.game.replace(/DX[0-9]+$/, '').replace(/[A-Z]{2}$/, '')];\n    if (options.version) {\n        parts.push(options.version);\n    }\n    parts.push('info.json');\n\n    const url = parts.join('/');\n    const request = new XMLHttpRequest();\n\n    function onFail() {\n        const error = request.statusText || 'No error message available; CORS or server missing?';\n        callback({\n            error: error\n        });\n    }\n\n    request.open('GET', url, true);\n\n    request.onload = () => {\n        if (request.status >= 200 && request.status < 400) {\n            try {\n                const info = JSON.parse(request.responseText);\n                info.staticRoot = [options.staticRoot, info.name, info.version].join('/');\n                info.aspectRatio = info.size.width / info.size.height;\n                info.infoJson = url;\n                callback(info);\n            } catch (e) {\n                callback({\n                    error: e.message\n                });\n            }\n        } else {\n            onFail();\n        }\n    };\n\n    request.onerror = onFail;\n\n    request.send();\n}\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","CDN","LOADER_URL","REPLACE_URL","GAMES_URL","DEFAULT_OPTIONS","device","environment","language","version","options","init","initOptions","window","nolimit","load","loadOptions","target","processOptions","mergeOptions","Window","document","createElement","setAttribute","body","appendChild","ownerDocument","defaultView","HTMLElement","iframe","element","from","to","attributes","i","length","attr","name","copyAttributes","generateName","getAttribute","id","makeIframe","parentNode","replaceChild","onload","listeners","unhandledEvents","unhandledCalls","port","addMessageListener","contentWindow","addEventListener","e","ports","onmessage","onMessage","postMessage","shift","handleUnhandledCalls","trigger","on","data","method","params","sendMessage","message","jsonrpc","ignored","undefined","push","event","forEach","callback","pop","nodeName","readyState","nolimitApiFactory","htmlOptions","head","focus","style","createTextNode","insertCss","querySelector","insertAdjacentHTML","loaderElement","backgroundColor","width","height","position","zIndex","classList","add","src","replace","cdn","operator","game","innerHTML","error","JSON","stringify","infoPromise","Promise","resolve","reject","info","then","gameElement","staticRoot","loadStart","Date","now","catch","html","replaceOptions","noop","location","href","url","urlOptions","gameOptions","makeQueryStringOptions","query","encodeURIComponent","join","makeQueryString","infoOptions","parts","request","XMLHttpRequest","onFail","statusText","open","status","parse","responseText","aspectRatio","size","infoJson","onerror","send","loadInfo","globalOptions","replay","token","result","optionsToProcess","toLowerCase","mute","indexOf","playForFunCurrency","currency","generatedIndex"],"sourceRoot":""}